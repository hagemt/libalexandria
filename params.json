{"name":"libalexandria","body":"libalexandria\r\n=============\r\n\r\nThis README file contains information regarding libalexandria,\r\na humorously named for its inclusive breadth of FORTRAN code,\r\nbound using C/C++, all the way \"through the ages\" into Java,\r\nand further entensible using future interfaces, many and more\r\nof which have even yet to be imagined.\r\n\r\nPhilosophy\r\n----------\r\n\r\nlibalexandria is envisioned to address a very defined Separation\r\nof Concerns, those being, specifically, and not otherwise:\r\n\r\nSimple Interface <-- (Efficient Bridge) --> Advanced Computation\r\n\r\nSo broadly stated, we implement this philosophy using the Java\r\nNative Interface (JNI) to provide a data-transformational intermediary\r\nlayer, which permits (or to varying degrees, facilitates) the\r\nuse of much less abstract (closer-to-the-bits) implementation of\r\nnumerically precise and efficient codes (C, C++, even FORTRAN)\r\nthat turn the focus away from general usability and instead\r\nmaximize the speed and accuracy of computation.\r\n\r\nAs such, the top layer of libalexandria is quite abstract,\r\nperhaps exceedingly (rediculously) so, by design. Here is where\r\nwe allow ourselves this, in the name of the power that abstraction\r\n(see Liskov) gives us, to organize concepts and communicate them to\r\nour users with extreme clarity. No expense should be spared to\r\nmaintain this transparency.\r\n\r\nNaturally, this can make the base of libalexandria, henceforth\r\nreferred to as laX (standing for libalexandria X, where X is a\r\nshort string encoding the implementation language) quite arcane.\r\nThrough more general use, these procedures will become bound\r\nto nodes in the hierarchy of bindings, which will provide\r\nmyriad interfaces to your wonderful heap of technical wizardry.\r\n\r\n(As an example, the prefix laF is used to reference .F codes.)\r\n\r\nHopefully, you will agree that there are at least two concerns\r\nrepresented here, and so this division makes logical sense to you.\r\nIf not, please discuss alternatives via the project wiki.\r\nSo, that is it. Find your niche and start your engines.\r\n\r\nFeatures\r\n--------\r\n\r\nThe Library of Alexandria will provide:\r\n\r\n* A easy mechanism for any program to produce:\r\n     * Maximum-likelihood estimates in an efficient manner\r\n* Many other planned features, bridging many layers of abstraction\r\n\r\nHistory\r\n-------\r\n\r\nlibalexandria began in September 2012 as a personal project.\r\nIf you contribute to it, you may wish to add your name below.\r\n\r\nBuilding\r\n--------\r\n\r\nCurrently, libalexandria uses `make -f Makefile.poc`; however, we will\r\ntransition as project evolves, in order to offer broader support for\r\nmultiple platforms and configurations.\r\n\r\nDeveloper testing of libalexandria currently involves:\r\n\r\n* gcc\r\n* gfortran\r\n* openjdk\r\n\r\nContributors\r\n------------\r\n\r\nTor E Hagemann <hagemt@rpi.edu>\r\n","tagline":"What's your Intent?","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}